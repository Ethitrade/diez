#!/usr/bin/env node
const { canRunCommand, Format, Log } = require('@diez/cli-core');
const { execSync, fork } = require('child_process');
const { join, resolve } = require('path');

(async () => {
  // Make sure Yarn is installed.
  if (!await canRunCommand('yarn --version')) {
    Log.error('Yarn is required to run the example projects. See https://yarnpkg.org for details.');
    process.exit(1);
  }

  const target = process.argv.pop();
  if (!['web'].includes(target)) {
    Log.error('Usage: start web');
    process.exit(0);
  }

  const cwd = resolve(__dirname, '..');
  const diez = join('.', 'node_modules', '.bin', 'diez');

  Log.comment(`Building Diez project for target ${target}...`);
  let hotProcess;
  let guideUrl;
  switch (target) {
    case 'web':
      execSync(`${diez} compile -t web`, { cwd, stdio: 'inherit' });
      Log.comment('Installing Node dependencies in example codebase...');
      execSync('yarn', { cwd: join(cwd, 'examples', 'web'), stdio: 'inherit' });
      Log.comment('Starting the Diez hot server...');
      hotProcess = fork(diez, ['hot', '-t', 'web'], { cwd, stdio: 'inherit' });
      guideUrl = 'https://beta.diez.org/getting-started/javascript.html';
      break;
  }

  const handleBuilt = (message) => {
    if (message === 'built') {
      hotProcess.off('message', handleBuilt);
      Log.comment(`
Your Diez project is now running in hot mode for ${target}.`);
      Log.comment(`
In hot mode, Diez observes and emits changes to your design system in real time.`);
      if (process.send) {
        process.send('built');
        return;
      }

      Log.comment(`
To see Diez in action, leave the hot server running, open a new tab in your
terminal, and follow along with the guide at:

  ${Format.code(guideUrl)}
`);
    }
  };
  hotProcess.on('message', handleBuilt);
})();

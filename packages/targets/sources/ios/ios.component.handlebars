@objc(DEZ{{{componentName}}})
{{#if public}}
public final class {{{componentName}}}: NSObject, StateBag {
{{else}}
public final class {{{componentName}}}: NSObject, Decodable {
{{/if}}
    {{#each properties}}
    @objc public internal(set) var {{@key}}: {{this.type}}
    {{/each}}
    {{#if hasProperties}}

    private enum CodingKeys: String, CodingKey {
        {{#each properties}}
        case {{@key}}
        {{/each}}
    }
    {{#if singleton}}

    {{#if public}}public {{/if}}override init() {
        {{#each properties}}
        {{@key}} = {{{this.initializer}}}
        {{/each}}
    }
    {{/if}}

    init(
        {{#each properties}}
        {{@key}}: {{{this.type}}}{{#unless @last}},{{/unless}}
        {{/each}}
    ) {
        {{#each properties}}
        self.{{@key}} = {{{@key}}}
        {{/each}}
    }
    {{else}}
    public override init() {}
    {{/if}}
    {{#if public}}

    public static let name = "{{{componentName}}}"
    {{/if}}
}

extension {{{componentName}}}: Updatable {
    public func update(from decoder: Decoder) throws {
        guard let container = try decoder.containerIfPresent(keyedBy: CodingKeys.self) else { return }
        {{#each properties}}
          {{#if this.updateable}}
        try container.update(updatable: &{{@key}}, forKey: .{{@key}})
          {{else}}
        try container.update(value: &{{@key}}, forKey: .{{@key}})
          {{/if}}
        {{/each}}
    }
}

extension {{{componentName}}}: ReflectedCustomStringConvertible {
    public override var description: String {
        return reflectedDescription
    }
}
{{#if public}}

/// This is only intended to be used by Objective-C consumers. 
/// In Swift use Diez<{{{componentName}}}>.
@available(swift, obsoleted: 0.0.1)
@objc(DEZDiez{{{componentName}}})
public final class DiezBridged{{{componentName}}}: NSObject {
    @objc public init(view: UIView) {
        diez = Diez(view: view)

        super.init()
    }

    /**
     Registers the provided block for updates to the {{{componentName}}}.

     The provided closure is called synchronously when this function is called.

     If in [development mode](x-source-tag://Diez), this closure will also be called whenever changes occur to the
     component.

     - Parameter subscriber: The block to be called when the component updates.
     */
    @objc public func attach(_ subscriber: @escaping ({{{componentName}}}?, NSError?) -> Void) {
        diez.attach { result in
            switch result {
            case .success(let component):
                subscriber(component, nil)
            case .failure(let error):
                subscriber(nil, error.asNSError)
            }
        }
    }

    private let diez: Diez<{{{componentName}}}>
}
{{/if}}

{{#if public}}
public final class {{{componentName}}}: NSObject, StateBag {
{{else}}
public final class {{{componentName}}}: NSObject, Decodable, Updatable {
{{/if}}
    {{#each properties}}
    public var {{@key}}: {{this.type}}
    {{/each}}

    private enum CodingKeys: String, CodingKey {
        {{#each properties}}
        case {{@key}}
        {{/each}}
    }

    {{#if singleton}}
    {{#if public}}public {{/if}}override init() {
        {{#each properties}}
        {{@key}} = {{{this.initializer}}}
        {{/each}}
    }
    {{/if}}

    init(
        {{#each properties}}
        {{@key}}: {{{this.type}}}{{#unless @last}},{{/unless}}
        {{/each}}
    ) {
        {{#each properties}}
        self.{{@key}} = {{{@key}}}
        {{/each}}
    }

    {{#if public}}
    public static let name = "{{{componentName}}}"
    {{/if}}

    public func update(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        {{#each properties}}
          {{#if this.updateable}}
        try container.update(&{{@key}}, forKey: .{{@key}})
          {{else}}
        {{@key}} = try container.decode({{this.type}}.self, forKey: .{{@key}})
          {{/if}}
        {{/each}}
    }
}
